{"raw_content": "{\n  \"data\": {\n    \"extracted_information\": \"The provided content details various message passing patterns, communication APIs, and security considerations within Chrome Extensions for inter-component communication.\",\n    \"specifications\": {\n      \"message_format\": \"Any valid JSON object (null, boolean, number, string, array, or object)\"\n    },\n    \"pricing\": {},\n    \"features\": [\n      {\n        \"category\": \"Message Passing Patterns\",\n        \"details\": [\n          {\n            \"name\": \"One-time requests\",\n            \"description\": \"Used to send a single message to another part of the extension, with an optional response. Uses `runtime.sendMessage()` or `tabs.sendMessage()` APIs. The `sendResponse` callback must be called synchronously, or `true` returned from the event listener for asynchronous work to keep the channel open. Async functions are not supported for `sendResponse` callbacks as they return Promises.\",\n            \"apis_used\": [\n              \"`runtime.sendMessage()`\",\n              \"`tabs.sendMessage()`\",\n              \"`runtime.onMessage`\"\n            ]\n          },\n          {\n            \"name\": \"Long-lived connections\",\n            \"description\": \"Creates a reusable channel for multiple messages. Useful for scenarios requiring shared state or continuous communication (e.g., form-filling). Uses `runtime.connect()` or `tabs.connect()` to establish a connection, which assigns a `runtime.Port` object to each end for sending/receiving messages. Connections can be named to distinguish channel types. `runtime.onConnect` event listener handles incoming connections.\",\n            \"apis_used\": [\n              \"`runtime.connect()`\",\n              \"`tabs.connect()`\",\n              \"`runtime.Port`\",\n              \"`port.postMessage()`\",\n              \"`port.onMessage.addListener()`\",\n              \"`runtime.onConnect`\"\n            ],\n            \"port_lifetime\": \"Ports are two-way communication methods. A `runtime.Port.onDisconnect` event fires when a connection closes due to no listeners, tab/frame unload, or explicit `disconnect()` call by the other end. If `connect()` results in multiple ports at receiver, `disconnect()` on one only affects sending port, not other receiver ports.\"\n          },\n          {\n            \"name\": \"Cross-extension messaging\",\n            \"description\": \"Allows communication between different Chrome Extensions, enabling public API exposure. Uses `runtime.onMessageExternal` for single requests and `runtime.onConnectExternal` for long-lived connections. Messages are sent by specifying the target extension's ID.\",\n            \"apis_used\": [\n              \"`runtime.onMessageExternal`\",\n              \"`runtime.onConnectExternal`\",\n              \"`chrome.runtime.sendMessage(extensionId, ...)`\",\n              \"`chrome.runtime.connect(extensionId)`\"\n            ]\n          },\n          {\n            \"name\": \"Messages from web pages\",\n            \"description\": \"Extensions can receive and respond to messages from external web pages, but cannot initiate messages to web pages. Requires specifying `\"externally_connectable\"` manifest key with URL patterns in `manifest.json`. Web pages use `chrome.runtime.sendMessage()` or `chrome.runtime.connect()` with the extension ID. Extensions listen using `runtime.onMessageExternal` or `runtime.onConnectExternal`.\",\n            \"apis_used\": [\n              \"`runtime.sendMessage()` (from web page)\",\n              \"`runtime.connect()` (from web page)\",\n              \"`runtime.onMessageExternal` (in extension)\",\n              \"`runtime.onConnectExternal` (in extension)\"\n            ],\n            \"manifest_key\": {\n              \"name\": \"`externally_connectable`\",\n              \"purpose\": \"To expose messaging API to specific websites.\",\n              \"format\": \"{ \\\"matches\\\": [\\\"https://*.example.com/*\\\"] }\",\n              \"note\": \"URL patterns must contain at least a second-level domain. `\\\"<all_urls>\\\"` allowed from Chrome 107 but may increase review time.\"\n            }\n          },\n          {\n            \"name\": \"Native messaging\",\n            \"description\": \"Enables extensions to exchange messages with native applications registered as native messaging hosts. More details available in the 'Native messaging' concept documentation.\",\n            \"apis_used\": [\n              \"`runtime.connectNative()`\"\n            ]\n          }\n        ]\n      },\n      {\n        \"category\": \"Security Considerations\",\n        \"details\": [\n          {\n            \"name\": \"Content scripts trustworthiness\",\n            \"description\": \"Content scripts are considered less trustworthy than the extension service worker. Messages from content scripts should be assumed to be potentially crafted by an attacker. All input received from content scripts must be validated and sanitized.\",\n            \"guideline\": \"Limit the scope of privileged actions triggered by messages from content scripts. Assume data sent to content scripts might leak to the web page.\"\n          },\n          {\n            \"name\": \"Cross-site scripting (XSS) prevention\",\n            \"description\": \"Protect scripts from XSS attacks when handling data from untrusted sources (user input, other websites via content scripts, APIs). Avoid interpreting such data as HTML or using it in ways that could allow unexpected code execution.\",\n            \"safer_methods\": [\n              \"Using `JSON.parse()` for JSON data received from untrusted sources.\",\n              \"Using `element.innerText` to assign text content, preventing HTML injection.\"\n            ],\n            \"unsafe_methods_to_avoid\": [\n              \"Using `eval()` on untrusted input.\",\n              \"Assigning untrusted input to `element.innerHTML`.\"\n            ]\n          }\n        ]\n      }\n    ],\n    \"statistics\": {},\n    \"temporal_info\": {\n      \"last_updated\": \"2012-09-18 UTC\",\n      \"chrome_version_notes\": \"Chrome 107 allows `\\\"<all_urls>\\\"` in `externally_connectable`\"\n    },\n    \"geographical_data\": {},\n    \"references\": [\n      {\n        \"title\": \"Manifest V3 migration guide\",\n        \"url\": \"/docs/extensions/develop/migrate/api-calls#replace-callbacks\"\n      },\n      {\n        \"title\": \"Second-level domain\",\n        \"url\": \"https://wikipedia.org/wiki/Second-level_domain\"\n      },\n      {\n        \"title\": \"Chrome Web Store review process\",\n        \"url\": \"/docs/webstore/review-process#review-time-factors\"\n      },\n      {\n        \"title\": \"Native messaging client\",\n        \"url\": \"/docs/extensions/develop/concepts/native-messaging#native-messaging-client\"\n      },\n      {\n        \"title\": \"Native messaging host\",\n        \"url\": \"/docs/extensions/develop/concepts/native-messaging#native-messaging-host\"\n      },\n      {\n        \"title\": \"Native messaging (concept)\",\n        \"url\": \"/docs/extensions/develop/concepts/native-messaging\"\n      },\n      {\n        \"title\": \"Content scripts security\",\n        \"url\": \"/docs/extensions/develop/security-privacy/stay-secure#content_scripts\"\n      },\n      {\n        \"title\": \"Validate and sanitize input\",\n        \"url\": \"/docs/extensions/develop/security-privacy/stay-secure#sanitize\"\n      },\n      {\n        \"title\": \"Cross-site scripting (Wikipedia)\",\n        \"url\": \"https://wikipedia.org/wiki/Cross-site_scripting\"\n      }\n    ]\n  }\n}"}