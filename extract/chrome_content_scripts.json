{"extracted_information": "Detailed technical information about Chrome extension content scripts, including their capabilities, permissions, injection methods, and interaction with web pages, with references to Manifest V3 APIs and security considerations.", "specifications": {"content_script_definition": "Files that execute within the context of web pages, enabling them to read and modify the Document Object Model (DOM) and communicate with their parent extension.", "execution_environment": {"isolated_worlds": "Content scripts run in an isolated JavaScript environment, preventing conflicts with the host page's scripts or other extensions' content scripts. The default 'world' for injection is `ISOLATED`."}, "security_guidelines": ["Sanitize content fetched from external websites to prevent cross-site scripting (XSS) attacks before injection.", "Utilize HTTPS for all communications to mitigate 'man-in-the-middle' attacks.", "Implement measures to filter out malicious web pages.", "Manifest V3 prohibits insecure code patterns such as `eval()` and `setTimeout()` with string arguments. Developers should use `JSON.parse()` for parsing data and closure forms for `setTimeout()` to ensure safety."]}, "features": [{"name": "Direct Extension API Access", "description": "Content scripts have direct access to a limited set of Chrome Extension APIs:", "apis": ["dom", "i18n", "storage", "runtime.connect()", "runtime.getManifest()", "runtime.getURL()", "runtime.id", "runtime.onConnect", "runtime.onMessage", "runtime.sendMessage()"]}, {"name": "Indirect Extension API Access", "description": "Access to other extension APIs is achieved indirectly through message passing with different parts of the extension."}, {"name": "Access to Extension Files", "description": "Content scripts can access other files within the extension.", "methods": ["`fetch()`: For files declared as `web_accessible_resources` in `manifest.json`.", "`chrome.runtime.getURL()`: To obtain the absolute URL for an extension asset (e.g., `images/my_image.png`).", "`@@extension_id`: Used within CSS files to reference extension assets (e.g., `chrome-extension://__MSG_@@extension_id__/background.png`)."], "requirement": "All referenced assets must be declared in the `web_accessible_resources` field of `manifest.json`, specifying `resources` and `matches`."}, {"name": "Communication with Embedding Page", "description": "Despite isolated execution environments, content scripts and the host page can communicate via the shared DOM.", "method_example": "`window.postMessage()`: Facilitates message exchange between the web page and the content script, or through the content script to the extension process."}, {"name": "Content Script Injection Methods", "description": "Chrome extensions offer three primary methods for injecting content scripts into web pages:", "methods": [{"type": "Static Declarations", "manifest_key": "`content_scripts`", "use_case": "For scripts that need to be automatically injected on a predefined set of pages.", "properties": {"`matches`": "Array of strings (required). Defines which URLs the script will be injected into, using match patterns.", "`css`": "Array of strings (optional). CSS files injected in order, before DOM construction.", "`js`": "Array of strings (optional). JavaScript files injected in order.", "`run_at`": "Optional, defaults to `document_idle`. Controls the timing of JS injection (e.g., `document_start`, `document_idle`, `document_end`).", "`match_about_blank`": "Boolean (optional). Injects into `about:blank` frames whose parent or opener matches `matches`. Default `false`.", "`match_origin_as_fallback`": "Boolean (optional). Injects into frames (e.g., `about:`, `data:`, `blob:`, `filesystem:`) if their initiator's origin matches a pattern. Requires `matches` path of `*`. Prioritized over `match_about_blank`.", "`world`": "ExecutionWorld (optional). Specifies the JavaScript world for execution, default `ISOLATED`.", "`exclude_matches`": "Array of strings (optional). Excludes URLs that would otherwise be matched.", "`include_globs`": "Array of strings (optional). Further filters `matches` to include only URLs matching a glob pattern.", "`exclude_globs`": "Array of strings (optional). Further filters `matches` to exclude URLs matching a glob pattern."}, "glob_syntax": "Supports 'wildcard' asterisks (`*` for any string) and question marks (`?` for any single character)."}, {"type": "Dynamic Declarations (Manifest V3)", "introduced_in": "Chrome 96", "api_namespace": "`chrome.scripting`", "use_case": "Flexible injection when match patterns are not fixed or require conditional application.", "api_methods": ["`registerContentScripts(scripts)`", "`getRegisteredContentScripts()`", "`updateContentScripts(scripts)`", "`unregisterContentScripts(details)`"], "script_object_properties": ["`id`", "`js`", "`persistAcrossSessions`", "`matches`", "`runAt`", "`excludeMatches`", "`allFrames`"]}, {"type": "Programmatic Injection", "api_method": "`chrome.scripting.executeScript`", "use_case": "For injecting scripts in response to specific events or at particular times.", "injection_formats": ["Injecting external JavaScript files (e.g., `files: ['content-script.js']`).", "Injecting a JavaScript function body directly (e.g., `func: injectedFunction`). The function is copied and must be self-contained; arguments can be passed via `args`."]}]}], "permissions": {"required_for_programmatic_injection": ["Host permissions (declared in `manifest.json`)", "`activeTab` permission (for temporary host permissions)", "`scripting` permission (required for using `chrome.scripting.executeScript`)"]}, "temporal_info": {"document_last_updated": "2012-09-17 UTC", "dynamic_declarations_introduced": "Chrome 96"}}